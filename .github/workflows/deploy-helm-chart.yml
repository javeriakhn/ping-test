name: Deploy Helm Charts to AKS

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Import Helm Charts and Deploy to AKS
        run: |
          # Log in to source and destination ACR
          az acr login --name "${{ secrets.SOURCE_ACR_SERVER }}"
          az acr login --name "${{ secrets.INSTANCE_ACR_SERVER }}"

          # Import charts
          for chart in $(echo '${{ secrets.CHARTS }}' | jq -c '.[]'); do
            chart_name=$(echo "$chart" | jq -r '.chart_name')
            chart_version=$(echo "$chart" | jq -r '.chart_version')
            chart_repository=$(echo "$chart" | jq -r '.chart_repository')

            helm pull "${{ secrets.SOURCE_ACR_SERVER }}/${chart_repository}/${chart_name}" --version "${chart_version}"
            helm chart save "${chart_name}-${chart_version}.tgz" "${{ secrets.INSTANCE_ACR_SERVER }}/${chart_repository}/${chart_name}:${chart_version}"
            helm chart push "${{ secrets.INSTANCE_ACR_SERVER }}/${chart_repository}/${chart_name}:${chart_version}"
          done

          # Set up kubectl
          az aks get-credentials --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --name "${{ secrets.AZURE_AKS_CLUSTER_NAME }}"

          # Deploy charts
          for chart in $(echo '${{ secrets.CHARTS }}' | jq -c '.[]'); do
            chart_name=$(echo "$chart" | jq -r '.chart_name')
            chart_version=$(echo "$chart" | jq -r '.chart_version')
            chart_repository=$(echo "$chart" | jq -r '.chart_repository')
            chart_namespace=$(echo "$chart" | jq -r '.chart_namespace')
            values=$(echo "$chart" | jq -r '.values | to_entries | map("\(.key)=\(.value)") | join(",")')
            sensitive_values=$(echo "$chart" | jq -r '.sensitive_values | to_entries | map("\(.key)=\(.value)") | join(",")')

            helm upgrade --install "${chart_name}" "${{ secrets.INSTANCE_ACR_SERVER }}/${chart_repository}/${chart_name}" --version "${chart_version}" --namespace "${chart_namespace}" --set ${values} --set ${sensitive_values}
          done

          # Clean up Helm charts
          rm -f *.tgz

      - name: Check Helm Release Status
        run: |
          for chart in $(echo '${{ secrets.CHARTS }}' | jq -c '.[]'); do
            chart_name=$(echo "$chart" | jq -r '.chart_name')
            chart_namespace=$(echo "$chart" | jq -r '.chart_namespace')

            echo "Checking Helm release status for ${chart_name} in namespace ${chart_namespace}"
            helm status "${chart_name}" --namespace "${chart_namespace}"
          done

      - name: Verify Kubernetes Pods and Services
        run: |
          for chart in $(echo '${{ secrets.CHARTS }}' | jq -c '.[]'); do
            chart_namespace=$(echo "$chart" | jq -r '.chart_namespace')

            echo "Verifying Kubernetes pods in namespace ${chart_namespace}"
            kubectl get pods --namespace "${chart_namespace}"

            echo "Verifying Kubernetes services in namespace ${chart_namespace}"
            kubectl get services --namespace "${chart_namespace}"
          done
